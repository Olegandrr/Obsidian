{
  "main": {
    "id": "c69f26328fde546a",
    "type": "split",
    "children": [
      {
        "id": "ae5df19534ae493a",
        "type": "tabs",
        "children": [
          {
            "id": "1f762c50cfddbe12",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "3. JSCore/1 Основные концепции/3 Продвинутая работа с функциями/3.3 Замыкания и области видимости.md",
                "mode": "preview",
                "source": false
              }
            }
          }
        ],
        "stacked": true
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "3c7c9be532992e4b",
    "type": "split",
    "children": [
      {
        "id": "e3a85997b8765760",
        "type": "tabs",
        "children": [
          {
            "id": "2b9eca97f11fd816",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "727a8f297f16c7a8",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "\"# 1 Что такое специфичность CSS-селекторов и как она работаетВ следующем списке типы селекторов расположены по возрастанию специфичности:1. селекторы типов элементов (например, h1) и псевдоэлементов (например, ::before).2. селекторы классов (например, .example), селекторы атрибутов (например, [type=\\\"radio\"]) и псевдоклассов (например, :hover)3. селекторы идентификаторов (например, #example).Универсальный селектор (*), комбинаторы (+, >, ~, ' ') и отрицающий псевдокласс (:not()) не влияют на специфичность. (Однако селекторы, объявленные внутри :not(), влияют)Стили, обьявленные в элементе (например, style=\"font-weight:bold\"), всегда переопределяют любые правила из внешних файлов стилей и, таким образом, их специфичность можно считать наивысшей.**Расчёт специфичности**- тег и псевдоэлемент имеют специфичность 0001- класс, псевдокласс, атрибут - 0010- id имеет специфичность 0100- инлайновый стиль имеет приоритет 1000\"",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": true,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "717e92aee162492d",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 360.5
  },
  "right": {
    "id": "58407df49daf5547",
    "type": "split",
    "children": [
      {
        "id": "013f564fc2672fbe",
        "type": "tabs",
        "children": [
          {
            "id": "bc30b558a85817c7",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "3. JSCore/1 Основные концепции/3 Продвинутая работа с функциями/3.3 Замыкания и области видимости.md",
                "collapseAll": true,
                "extraContext": true,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": false
              }
            }
          },
          {
            "id": "fb45945aec97379b",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "3. JSCore/1 Основные концепции/3 Продвинутая работа с функциями/3.3 Замыкания и области видимости.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": false
              }
            }
          },
          {
            "id": "9f6e7a60b6c080c2",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": false
              }
            }
          },
          {
            "id": "74670d5ff67feb55",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "3. JSCore/1 Основные концепции/3 Продвинутая работа с функциями/3.3 Замыкания и области видимости.md"
              }
            }
          },
          {
            "id": "d75c6efea73e5c1f",
            "type": "leaf",
            "state": {
              "type": "calendar",
              "state": {}
            }
          }
        ],
        "currentTab": 3
      }
    ],
    "direction": "horizontal",
    "width": 498.5
  },
  "left-ribbon": {
    "hiddenItems": {
      "audio-recorder:Начать/остановить запись": false,
      "graph:Граф": false,
      "switcher:Меню быстрого перехода": false,
      "templates:Вставить шаблон": false,
      "daily-notes:Сегодняшняя заметка": false,
      "command-palette:Открыть палитру команд": false,
      "zk-prefixer:Создать заметку с уникальным идентификатором": false
    }
  },
  "active": "1f762c50cfddbe12",
  "lastOpenFiles": [
    "3. JSCore/1 Основные концепции/3 Продвинутая работа с функциями/Подробнее про рекурсию.md",
    "img/Pasted image 20230618004612.png",
    "3. JSCore/Подготовка к собеседованиям/109. Set и Map.md",
    "3. JSCore/Подготовка к собеседованиям/Что такое цикл событий (event loop).md",
    "InBOX/202306180123.md",
    "3. JSCore/Подготовка к собеседованиям/108. Что произойдет в результате выражения `var foo = 10 + 20` и почему.md",
    "3. JSCore/Подготовка к собеседованиям/107. В чем разница между областью видимости функции и блочной областью видимости.md",
    "3. JSCore/Подготовка к собеседованиям/106. Что такое DOM.md",
    "3. JSCore/Подготовка к собеседованиям/105. Что такое функция высшего порядка.md",
    "3. JSCore/Подготовка к собеседованиям/104. В чем разница между ES6 `class` и ES5 `function constructor`.md",
    "3. JSCore/Подготовка к собеседованиям/103. В чем разница между `let`, `const` и `var`.md",
    "3. JSCore/Подготовка к собеседованиям/102. Что такое цикл событий В чем разница между стеком вызовов и очередью задач.md",
    "3. JSCore/Подготовка к собеседованиям/101. Объясните разницу между синхронными и асинхронными функциями.md",
    "3. JSCore/Подготовка к собеседованиям/100. Объясните разницу между изменяемыми и неизменяемыми значениями.md",
    "3. JSCore/Подготовка к собеседованиям/99. Какие конструкции языка вы используете для обхода массивов и объектов.md",
    "3. JSCore/Подготовка к собеседованиям/98. Какие инструменты вы используете при отладке.md",
    "3. JSCore/Подготовка к собеседованиям/97. Какие преимущества и недостатки у использования Promise API вместо обратных вызовов.md",
    "3. JSCore/Подготовка к собеседованиям/109. Что такое SPA и как сделать его SEO-friendly.md",
    "3. JSCore/Подготовка к собеседованиям/96. Почему лучше оставлять глобальную область видимости как есть и не трогать ее.md",
    "3. JSCore/Подготовка к собеседованиям/95. В чем разница между == и ===.md",
    "3. JSCore/Подготовка к собеседованиям/94. В чем разница между атрибутами и свойствами.md",
    "3. JSCore/Подготовка к собеседованиям/93. Что вы знаете об AJAX.md",
    "3. JSCore/Подготовка к собеседованиям/92. Как работает `Function.prototype.bind`.md",
    "3. JSCore/Подготовка к собеседованиям/91. В чем разница между `Function.prototype.call` и `Function.prototype.apply`.md",
    "3. JSCore/Подготовка к собеседованиям/90. Объясните разницу между `const person = Person()` и `const person = new Person()` при `function Person(){}`.md",
    "3. JSCore/Подготовка к собеседованиям/89. В каких случаях используются анонимные функции.md",
    "3. JSCore/Подготовка к собеседованиям/88. В чем разница между Array.prototype.forEach и Array.prototype.map.md",
    "3. JSCore/Подготовка к собеседованиям",
    "4. ReactCore/Подготовка к собеседованиям",
    "2. CSS/Подготовка к собеседованиям",
    "26. Какими CSS-фреймворками вы пользовались Что бы вы хотели в них изменить",
    "1. HTML/Подготовка к собеседованиям",
    "500. Литература/JSCore/2 - Симпсон К. - Вы не знаете JS. Замыкания и объекты 2019.pdf",
    "500. Литература/JSCore/3 - Симпсон К. - Вы не знаете JS. Типы и грамматические конструкции 2019 (1).pdf",
    "InBOX/Strings.pdf",
    "img/Pasted image 20230613000633.png",
    "1. HTML/0. Вопросы к ревью webcore/Не подтверждено 279193.~",
    "1. HTML/0. Вопросы к ревью webcore/Не подтверждено 106629.~",
    "img/Pasted image 20230529222050.png",
    "img/Pasted image 20230529234116.png",
    "img/Pasted image 20230530003321.png",
    "img/Pasted image 20230530014353.png",
    "img/Pasted image 20230529003402.png",
    "img/Pasted image 20230530013004.png",
    "img/Pasted image 20230530001548.png",
    "img/Pasted image 20230529222544.png",
    "Без названия.canvas",
    "0.4 Вопросы к ревью React/Преимущества и недостатки HOC.canvas",
    "Без названия (2).canvas",
    "РАЗБОР СОДЕРЖИМОГО/Область видимости.canvas"
  ]
}